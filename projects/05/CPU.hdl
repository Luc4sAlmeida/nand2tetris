// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // 111 0000000 000 111
        DecodedInstruction(in=instruction, op=op, a=a, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6, d1=d1, d2=d2, d3=d3, j1=j1, j2=j2, j3=j3);
        
        Not(in=op, out=isA);
        Not(in=isA, out=isC); 

        And(a=isC, b=d1, out=ALUtoA);    // C-inst and dest to A-reg?
        Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=AregIn);

        Or(a=isA, b=ALUtoA, out=loadA);
        ARegister(in=AregIn, load=loadA, out=outRegA);

        Mux16(a=outRegA, b=inM, sel=a, out=AMout);// select A or M based on a-bit

        And(a=isC, b=d2, out=loadD);
        DRegister(in=ALUout, load=loadD, out=outRegD);

        ALU(x=outRegD, y=AMout, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUout, zr=outZr, ng=outNg);

        // Outputs
        Or16(a=false, b=outRegA, out[0..14]=addressM);
        Or16(a=false, b=ALUout, out=outM);
        And(a=isC, b=d3, out=writeM);

         // calc PCload & PCinc - whether to load PC with A reg
        And(a=outZr, b=j2, out=jeq);    // is zero and jump if zero
        And(a=outNg, b=j1, out=jlt);    // is neg and jump if neg
        Or(a=outZr, b=outNg, out=zeroOrNeg);
        Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
        And(a=positive, b=j3, out=jgt); // is pos and jump if pos
        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
        And(a=isC, b=jumpToA, out=PCload); // Only jump if C instruction
        Not(in=PCload, out=PCinc);                  // only inc if not load
        PC(in=outRegA, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}